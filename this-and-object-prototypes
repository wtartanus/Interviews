In JavaScript this it's a special identifier keyword that's automatically defined
in the scope of every function.

this is not an author-time binding but a runtime binding. It is contextual 
based on the conditions of the function's invocation. this biding has 
nothing to do with where a function is declared, but has instead 
everything to do with the manner in which the function is called.

When a function is invoked, an activation record, otherwise known as an 
execution context, is created. This record contains information about where 
the function was called from (the call stack), how the function was invoked, 
what parameters were passed, etc. One of the properties of this record is the this 
reference which will be used for the duration of that function's execution.

In strict mode is in effect, the global object is not eligible for the 
default biding, so the this is instead set of undefined.

When a function is invoked with new in front of it, otherwise known as
a constructor call, the following things are done automatically:
    1. a brand new object is created (aka constructed) out of thin air 
    2. the newly constructed object is [[Prototype]] - linked
    3. the newly constructed object is set as the this biding for that 
        function call 
    4. unless the function returns its own alternate object, the new -invoked 
       function call will automatically return the newly constructed object.

Determining this 
 1. Is the function called with new (new biding)? If so, this is the newly 
    constructed object
 2. Is the function called with call or apply (explicit biding), even hidden 
    inside a bind hard biding? If so, this is the explicitly specified object.
 3. Is the function called with a context (implicit biding), otherwise known as
    an owning or containing objects? If so, this is that context object.
 4. Otherwise, default the this (default biding). If in strict mode,
    pick undefined, otherwise pick the global object.

Ignored this 
    If you pass null or undefined as a this binding parameter to call, apply,
    or bind, those values are effectively ignored, and instead the default 
    binding rule applies to the invocation.

The lexical binding of an arrow function cannot be overriden

function is a sub-type of object (technically, a "callable object")

If you want to prevent an object from having new properties added to it,
but otherwise leave the rest of the object's properties alone,
call Object.preventExtensions()

Seal 
    Object.seal(...) creates a "sealed" object, which means it takes an 
    existing object and essentially calls Object.preventExtensions() on it,
    but also marks all its existing properties configurable: false
    So not only can you not add any more properties, but you also cannot 
    reconfigure or delete existing properties (though you can still
    modify their values)

Freeze
    Object.freeze(..) creates a frozen object, which means it takes an existing
    object and essentially calls Object.seal(..) on it, but it also marks all 
    "data accessor" properties as writable: false, so that their values cannot 
    be changed.

JS has had some class-like syntactic elements (like new and instanceof)
for quite a while, and more recently in ES6, some additions, like the class
keyword.
But does that mean JavaScript actually has classes? Plain and simple: not


Classes are design pattern. Many languages provide syntax which enables natural
class-oriented software design. JS also has a similar syntax, but it behaves
very differently from what you're used to with classes in those other languages.
Classes mean copies.

In JavaScript, there are no such copy-actions performed. You don't create multiple
instances of a class. You can create multiple objects that [[[Prototype]]]
link to a common object. But by default, no copying occurs, and thus these 
objects don't end up totally separate and disconnected from each other, but rather,
quite linked.

The default [[Get]] operation proceeds to follow the [[Prototype]] link to the 
object if it cannot find the requested property on the object directly.

"Inheritance" implies a copy operation, and JavaScript doesn't copy object
properties (natively, by default). Instead, JS creates a link between two objects,
where one object can essentially delegate property/function access to another
object. "Delegation" is a much more accurate term for JavaScript object-linking
mechanism.
